// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#include "groupnorm_vulkan.h"

#include "layer_shader_type.h"
#include "mat.h"

namespace ncnn {

GroupNorm_vulkan::GroupNorm_vulkan()
{
    support_vulkan = true;
    support_image_storage = true;

    pipeline_hardsigmoid = 0;
    pipeline_hardsigmoid_pack4 = 0;
    pipeline_hardsigmoid_pack8 = 0;
}

int GroupNorm_vulkan::create_pipeline(const Option& opt)
{
    return 0;
}

int GroupNorm_vulkan::destroy_pipeline(const Option& /*opt*/)
{

    return 0;
}

int GroupNorm_vulkan::forward_inplace(VkMat& bottom_top_blob, VkCompute& cmd, const Option& opt) const
{
    const int dims = bottom_top_blob.dims;
    const int channels_per_group = channels / group;
    int elempack = bottom_top_blob.elempack;

    if (dims == 3 || dims == 4)
    {
        {

            VkMat group_mean;

                //mean
                {
                    //reduce w
                    VkMat sum_workspace_w_reduced;
                    {
                        int reduced_w = bottom_top_blob.h ;
                        int reduced_h = bottom_top_blob.c;
                        int reduced_c = 1;
            
                        sum_workspace_w_reduced.create(reduced_w, reduced_h, reduced_c, 4u * elempack, elempack, opt.workspace_vkallocator);
            
                        {
                            std::vector<VkMat> bindings(2);
                            bindings[0] = bottom_top_blob;
                            bindings[1] = sum_workspace_w_reduced;
            
                            std::vector<vk_constant_type> constants(8);
                            constants[0].i = bottom_top_blob.w;
                            constants[1].i = bottom_top_blob.h;
                            constants[2].i = bottom_top_blob.c;
                            constants[3].i = bottom_top_blob.cstep;
                            constants[4].i = sum_workspace_w_reduced.w;
                            constants[5].i = sum_workspace_w_reduced.h;
                            constants[6].i = sum_workspace_w_reduced.c;
                            constants[7].i = sum_workspace_w_reduced.cstep;
            
                            const Pipeline* pipeline = pipeline_x_GroupNorm_x_reduce_fp16_fp32;
            
                            cmd.record_pipeline(pipeline, bindings, constants, sum_workspace_w_reduced);
            
                        }
                    }
                    // input (h,c,1)
                    //reduce y
                    VkMat sum_workspace_h_reduced;
                    {
                        int reduced_w = sum_workspace_w_reduced.h;
                        int reduced_h = 1;
                        int reduced_c = 1;
            
                        sum_workspace_h_reduced.create(reduced_w, reduced_h, reduced_c, 4u * elempack, elempack, opt.workspace_vkallocator);
            
                        {
                            std::vector<VkMat> bindings(2);
                            bindings[0] = bottom_top_blob;
                            bindings[1] = sum_workspace_w_reduced;
            
                            std::vector<vk_constant_type> constants(8);
                            constants[0].i = bottom_top_blob.w;
                            constants[1].i = bottom_top_blob.h;
                            constants[2].i = bottom_top_blob.c;
                            constants[3].i = bottom_top_blob.cstep;
                            constants[4].i = sum_workspace_w_reduced.w;
                            constants[5].i = sum_workspace_w_reduced.h;
                            constants[6].i = sum_workspace_w_reduced.c;
                            constants[7].i = sum_workspace_w_reduced.cstep;
            
                            const Pipeline* pipeline = pipeline_x_GroupNorm_x_reduce_fp32;
            
                            cmd.record_pipeline(pipeline, bindings, constants, sum_workspace_w_reduced);
            
                        }
                    }

                    {
                        int reduced_w = channels /  group;
                        int reduced_h = 1;
                        int reduced_c = 1;
            
                        group_mean.create(reduced_w, reduced_h, reduced_c, 4u * elempack, elempack, opt.workspace_vkallocator);
            
                        {
                            std::vector<VkMat> bindings(2);
                            bindings[0] = sum_workspace_h_reduced;
                            bindings[1] = group_mean;
            
                            std::vector<vk_constant_type> constants(8);
                            constants[0].i = sum_workspace_h_reduced.w;
                            constants[1].i = channels / group;
                            constants[2].i = bottom_top_blob.w*bottom_top_blob.h*bottom_top_blob.d;
            
                            const Pipeline* pipeline = pipeline_x_group_reduce_fp32;
            
                            cmd.record_pipeline(pipeline, bindings, constants, group_mean);
            
                        }
                    }
                }

                //pow
                {
                    
                }
        }
    }
    // Mat bottom_top_blob_g = bottom_top_blob.range(g * channels_per_group, channels_per_group);
    return 0;

}

} // namespace ncnn
