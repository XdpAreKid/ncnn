// Tencent is pleased to support the open source community by making ncnn available.
//
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
//
// Licensed under the BSD 3-Clause License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
//
// https://opensource.org/licenses/BSD-3-Clause
//
// Unless required by applicable law or agreed to in writing, software distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#if NCNN_image_shader
layout (binding = 0) uniform highp sampler3D square_blob;
layout (binding = 1, r32f) writeonly uniform highp image3D sqsum_blob;
#else
layout (binding = 0) readonly buffer square_blob { float square_blob_data[]; };
layout (binding = 1) writeonly buffer sqsum_blob { float sqsum_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
    int w;
    int group_size;
    int size;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);

    if (gx > group_size)
        return;

    float sum;


#if NCNN_image_shader
    for (int i = 0; i < p.h; i++)
    {
        for (int j = 0; j < p.w; j++)
        {
            sum += texelFetch(bottom_top_blob, ivec3(j, i, gx), 0).r;
        }
    }
#else
    int start = gx*p.group_size;
    int end = start + p.group_size;
    for (int i = start; i < end; i++)
    {
        // sum += float(buffer_ld1(square_blob_data,v_offset));
        sum += sqsum_blob_data[i]
    }
#endif
#if NCNN_image_shader
    imageStore(sqsum_blob, ivec3(gy, gz, 0), vec4(sum));
#else
    sqsum_blob_data[start] = sum / (p.group_size * p.size);
}
